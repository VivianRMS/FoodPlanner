{"ast":null,"code":"var _jsxFileName = \"/Users/chenzhe/Desktop/FoodPlanner-main/src/components/upload.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst genAI = new GoogleGenerativeAI(\"AIzaSyAqmfslqSGlrqWbSllhR5ce0NPD2hxMuGs\");\nconst model = genAI.getGenerativeModel({\n  model: \"gemini-pro\"\n});\nconst model_vision = genAI.getGenerativeModel({\n  model: \"gemini-pro-vision\"\n});\nconst UploadAndDisplayImage = () => {\n  _s();\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [response, setResponse] = useState(\"\");\n  const handleImageUpload = async event => {\n    const file = event.target.files[0];\n    if (!file) return;\n    setSelectedImage(file);\n    setLoading(true);\n    const formData = new FormData();\n    formData.append(\"file\", file);\n    const sample_file = genAI.upload_file(path = selectedImage);\n    const file_1 = genAI.get_file(sample_file.name);\n\n    // try {\n    //   // Call the API with the image and the prompt\n    //   const prompt = \"give me recipe using the food in the picture\";\n    //   const result = await model_vision.generateContent(\n    //     prompt,\n    //     URL.createObjectURL(selectedImage)\n    //   );\n    //   // Assuming the API returns JSON response with the text in a field named 'text'\n    //   const text = result.data.text;\n    //   setResponse(text);\n    // } catch (error) {\n    //   console.error(\"Error uploading image and fetching data:\", error);\n    //   setResponse(\"Failed to fetch data\");\n    // } finally {\n    //   setLoading(false);\n    // }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Upload Your Refrigerator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      name: \"myImage\",\n      onChange: handleImageUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), selectedImage && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        alt: \"not found\",\n        width: \"250px\",\n        src: URL.createObjectURL(selectedImage)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setSelectedImage(null),\n        children: \"Remove\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this), response && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Response from API:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: response\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(UploadAndDisplayImage, \"bLgZ1J0hWVYUMTcH8l8tvxCS/rY=\");\n_c = UploadAndDisplayImage;\nexport default UploadAndDisplayImage;\nvar _c;\n$RefreshReg$(_c, \"UploadAndDisplayImage\");","map":{"version":3,"names":["React","useState","axios","GoogleGenerativeAI","jsxDEV","_jsxDEV","genAI","model","getGenerativeModel","model_vision","UploadAndDisplayImage","_s","selectedImage","setSelectedImage","loading","setLoading","response","setResponse","handleImageUpload","event","file","target","files","formData","FormData","append","sample_file","upload_file","path","file_1","get_file","name","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","alt","width","src","URL","createObjectURL","onClick","_c","$RefreshReg$"],"sources":["/Users/chenzhe/Desktop/FoodPlanner-main/src/components/upload.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\n\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\n\nconst genAI = new GoogleGenerativeAI(\"AIzaSyAqmfslqSGlrqWbSllhR5ce0NPD2hxMuGs\");\nconst model = genAI.getGenerativeModel({ model: \"gemini-pro\" });\nconst model_vision = genAI.getGenerativeModel({ model: \"gemini-pro-vision\" });\n\nconst UploadAndDisplayImage = () => {\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [response, setResponse] = useState(\"\");\n\n  const handleImageUpload = async (event) => {\n    const file = event.target.files[0];\n    if (!file) return;\n\n    setSelectedImage(file);\n    setLoading(true);\n    const formData = new FormData();\n    formData.append(\"file\", file);\n    const sample_file = genAI.upload_file((path = selectedImage));\n    const file_1 = genAI.get_file(sample_file.name);\n\n    // try {\n    //   // Call the API with the image and the prompt\n    //   const prompt = \"give me recipe using the food in the picture\";\n    //   const result = await model_vision.generateContent(\n    //     prompt,\n    //     URL.createObjectURL(selectedImage)\n    //   );\n    //   // Assuming the API returns JSON response with the text in a field named 'text'\n    //   const text = result.data.text;\n    //   setResponse(text);\n    // } catch (error) {\n    //   console.error(\"Error uploading image and fetching data:\", error);\n    //   setResponse(\"Failed to fetch data\");\n    // } finally {\n    //   setLoading(false);\n    // }\n  };\n\n  return (\n    <div>\n      <h1>Upload Your Refrigerator</h1>\n\n      <input type=\"file\" name=\"myImage\" onChange={handleImageUpload} />\n\n      <br />\n      <br />\n\n      {selectedImage && (\n        <div>\n          <img\n            alt=\"not found\"\n            width={\"250px\"}\n            src={URL.createObjectURL(selectedImage)}\n          />\n          <br />\n          <button onClick={() => setSelectedImage(null)}>Remove</button>\n        </div>\n      )}\n\n      {response && (\n        <div>\n          <p>Response from API:</p>\n          <p>{response}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default UploadAndDisplayImage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}